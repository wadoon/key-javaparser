{.. ...}
{.. ; ...}
{.. {} ...}
{.. #abortJavaCardTransaction; ...}
{.. #arraypost ...}
{.. #array-post-declaration(#arraypost); ...}
{.. assert #e1; ...}
{.. assert #e1 : #e2; ...}
{.. assert false : "Access permission check-point (read)."; ...}
{.. assert false : "Access permission check-point (static read)."; ...}
{.. assert false : "Access permission check-point (static write)."; ...}
{.. assert false : "Access permission check-point (write)."; ...}
{.. assert #nse1; ...}
{.. assert #nse1 : #e; ...}
{.. assert #se1; ...}
{.. assert #se1 : #nse2; ...}
{.. assert #se1 : null; ...}
{.. assert #se1 : #se2; ...}
{.. #beginJavaCardTransaction; ...}
{.. boolean #boolv; #boolv = #nse; if(#boolv) #s0 ...}
{.. boolean #boolv; #boolv = #nse; if(#boolv) #s0 else{#s1} ...}
{.. boolean #v0 = #nseBool0; boolean #v1 = #exBool1; #lhs = #v0 ^ #v1; ...}
{.. boolean #v0 = #nseBool0; boolean #v1 = #exBool1; #lhs = #v0 | #v1; ...}
{.. boolean #v0 = #nseBool0; boolean #v1 = #exBool1; #lhs= #v0 & #v1; ...}
{.. boolean #v0 = #nseBool0; #lhs = #v0 && #seBool1; ...}
{.. boolean #v0 = #nseBool0; #lhs = #v0 || #seBool1; ...}
{.. boolean #v = #e; ...}
{.. boolean #v=#nseBool; #lhs=!#v; ...}
{.. boolean #x; loop-scope(#x) { if (#nse) { #body continue; } } ... }
{ .. boolean #x; loop-scope(#x) { if (#nse) { #body continue; } else { break; } } ... }
{.. { break; } ...}
{.. break; ...}
{.. { break #lb; } ...}
{.. break #lb; ...}
{.. break #lb1; ...}
{.. { break #lb1; #slist} ...}
{.. { break #lb; #slist } ...}
{.. { break; #slist } ...}
{.. #commitJavaCardTransaction; ...}
{.. { continue; } ...}
{.. continue; ...}
{.. { continue #lb; } ...}
{.. continue #lb; ...}
{.. { continue #lb; #slist } ...}
{.. { continue; #slist } ...}
{.. #do-break(#lb0: break #lb1;); ...}
{.. { do #s while (#e); } ...}
{.. do #s while (#e); ...}
{.. #e0.#attribute %= #e; ...}
{.. #e0.#attribute &= #e; ...}
{.. #e0.#attribute *= #e; ...}
{.. #e0.#attribute += #e; ...}
{.. #e0.#attribute -= #e; ...}
{.. #e0.#attribute /= #e; ...}
{.. #e0.#attribute <<= #e; ...}
{.. #e0.#attribute >>= #e; ...}
{.. #e0.#attribute >>>= #e; ...}
{.. #e0.#attribute ^= #e; ...}
{.. #e0.#attribute |= #e; ...}
{.. #e0[#e] %= #e1; ...}
{.. #e0[#e] &= #e1; ...}
{.. #e0[#e] *= #e1; ...}
{.. #e0[#e] += #e1; ...}
{.. #e0[#e] -= #e1; ...}
{.. #e0[#e] /= #e1; ...}
{.. #e0[#e] <<= #e1; ...}
{.. #e0[#e] >>= #e1; ...}
{.. #e0[#e] >>>= #e1; ...}
{.. #e0[#e] ^= #e1; ...}
{.. #e0[#e] |= #e1; ...}
{.. #e.#attribute++; ...}
{.. #e.#attribute--; ...}
{.. ++#e.#attribute; ...}
{.. --#e.#attribute; ...}
{.. #e.#attribute = #e0; ...}
{.. (#e.#attribute) = #e0; ...}
{.. #e[#e0]++; ...}
{.. #e[#e0]--; ...}
{.. ++#e[#e0]; ...}
{.. --#e[#e0]; ...}
{ .. #enhancedfor-elim(for (#ty #id : #e) #stm); ... }
{.. #evaluate-arguments(#lhs = #nsmr); ...}
{.. #evaluate-arguments(#lhs = #nsn); ...}
{.. #evaluate-arguments(#nsmr); ...}
{.. #evaluate-arguments(#nsn); ...}
{.. exec { break; } ccat #cs ...}
{.. exec { break #lb; } ccat #cs ...}
{.. exec { break #lb; #slist } ccat ( \Break #lb1 ) { #slist1 } ccat #cs ...}
{.. exec { break #lb; #slist } ccat ( \Break #lb ) { #slist1 } ccat #cs ...}
{.. exec { break #lb; #slist } ccat ( \Break ) { #slist1 } ccat #cs ...}
{.. exec { break #lb; #slist } ccat ( \Break * ) { #slist1 } ccat #cs ...}
{.. exec { break #lb; #slist } ccat ( \Continue #lb1 ) { #slist1 } ccat #cs ...}
{.. exec { break #lb; #slist } ccat ( \Continue ) { #slist1 } ccat #cs ...}
{.. exec { break #lb; #slist } ccat ( \Continue * ) { #slist1 } ccat #cs ...}
{.. exec { break #lb; #slist } ccat ( \Return ) { #slist1 } ccat #cs ...}
{.. exec { break #lb; #slist } ccat ( \Return #t #v ) { #slist1 } ccat #cs ...}
{.. exec { break #lb; #slist } ccat ( #t #v ) { #slist1 } ccat #cs ...}
{.. exec { break; #slist } ccat ( \Break #lb ) { #slist1 } ccat #cs ...}
{.. exec { break; #slist } ccat ( \Break ) { #slist1 } ccat #cs ...}
{.. exec { break; #slist } ccat ( \Break * ) { #slist1 } ccat #cs ...}
{.. exec { break; #slist } ccat ( \Continue #lb ) { #slist1 } ccat #cs ...}
{.. exec { break; #slist } ccat ( \Continue ) { #slist1 } ccat #cs ...}
{.. exec { break; #slist } ccat ( \Continue * ) { #slist1 } ccat #cs ...}
{.. exec { break; #slist } ccat ( \Return ) { #slist1 } ccat #cs ...}
{.. exec { break; #slist } ccat ( \Return #t #v ) { #slist1 } ccat #cs ...}
{.. exec { break; #slist } ccat ( #t #v0 ) { #slist1 } ccat #cs ...}
{.. exec { } ccat #cs ...}
{.. exec { continue; } ccat #cs ...}
{.. exec { continue #lb; } ccat #cs ...}
{.. exec { continue #lb; #slist } ccat ( \Break #lb1 ) { #slist1 } ccat #cs ...}
{.. exec { continue #lb; #slist } ccat ( \Break ) { #slist1 } ccat #cs ...}
{.. exec { continue #lb; #slist } ccat ( \Break * ) { #slist1 } ccat #cs ...}
{.. exec { continue #lb; #slist } ccat ( \Continue #lb1 ) { #slist1 } ccat #cs ...}
{.. exec { continue #lb; #slist } ccat ( \Continue #lb ) { #slist1 } ccat #cs ...}
{.. exec { continue #lb; #slist } ccat ( \Continue ) { #slist1 } ccat #cs ...}
{.. exec { continue #lb; #slist } ccat ( \Continue * ) { #slist1 } ccat #cs ...}
{.. exec { continue #lb; #slist } ccat ( \Return ) { #slist1 } ccat #cs ...}
{.. exec { continue #lb; #slist } ccat ( \Return #t #v ) { #slist1 } ccat #cs ...}
{.. exec { continue #lb; #slist } ccat ( #t #v ) { #slist1 } ccat #cs ...}
{.. exec { continue; #slist } ccat ( \Break #lb ) { #slist1 } ccat #cs ...}
{.. exec { continue; #slist } ccat ( \Break ) { #slist1 } ccat #cs ...}
{.. exec { continue; #slist } ccat ( \Break * ) { #slist1 } ccat #cs ...}
{.. exec { continue; #slist } ccat ( \Continue ) { #slist1 } ccat #cs ...}
{.. exec { continue; #slist } ccat ( \Return ) { #slist1 } ccat #cs ...}
{.. exec { continue; #slist } ccat ( \Return #t #v ) { #slist1 } ccat #cs ...}
{.. exec { continue; #slist } ccat ( #t #v0 ) { #slist1 } ccat #cs ...}
{.. exec { return #se; } ccat #cs ...}
{.. exec { return #se; #slist } ccat ( \Break #lb ) { #slist1 } ccat #cs ...}
{.. exec { return #se; #slist } ccat ( \Break ) { #slist1 } ccat #cs ...}
{.. exec { return #se; #slist } ccat ( \Break * ) { #slist1 } ccat #cs ...}
{.. exec { return #se; #slist } ccat ( \Continue #lb ) { #slist1 } ccat #cs ...}
{.. exec { return #se; #slist } ccat ( \Continue ) { #slist1 } ccat #cs ...}
{.. exec { return #se; #slist } ccat ( \Continue * ) { #slist1 } ccat #cs ...}
{.. exec { return #se; #slist } ccat #cs ...}
{.. exec { return #se; #slist } ccat ( \Return ) { #slist1 } ccat #cs ...}
{.. exec { return #se; #slist } ccat ( \Return #t #v ) { #slist1 } ccat #cs ...}
{.. exec { return #se; #slist } ccat ( #t #v0 ) { #slist1 } ccat #cs ...}
{.. exec { return; #slist } ccat ( \Break #lb ) { #slist1 } ccat #cs ...}
{.. exec { return; #slist } ccat ( \Break ) { #slist1 } ccat #cs ...}
{.. exec { return; #slist } ccat ( \Break * ) { #slist1 } ccat #cs ...}
{.. exec { return; #slist } ccat ( \Continue #lb ) { #slist1 } ccat #cs ...}
{.. exec { return; #slist } ccat ( \Continue ) { #slist1 } ccat #cs ...}
{.. exec { return; #slist } ccat ( \Continue * ) { #slist1 } ccat #cs ...}
{.. exec { return; #slist } ccat ( \Return ) { #slist1 } ccat #cs ...}
{.. exec { return; #slist } ccat ( \Return #t #v ) { #slist1 } ccat #cs ...}
{.. exec { return; #slist } ccat ( #t #v0 ) { #slist1 } ccat #cs ...}
{.. exec { #slist } ...}
{.. exec { throw #se; } ccat #cs ...}
{.. exec { throw #se; #slist } ccat ( \Break #lb ) { #slist1 } ccat #cs ...}
{.. exec { throw #se; #slist } ccat ( \Break ) { #slist1 } ccat #cs ...}
{.. exec { throw #se; #slist } ccat ( \Break * ) { #slist1 } ccat #cs ...}
{.. exec { throw #se; #slist } ccat ( \Continue #lb ) { #slist1 } ccat #cs ...}
{.. exec { throw #se; #slist } ccat ( \Continue ) { #slist1 } ccat #cs ...}
{.. exec { throw #se; #slist } ccat ( \Continue * ) { #slist1 } ccat #cs ...}
{.. exec { throw #se; #slist } ccat ( \Return ) { #slist1 } ccat #cs ...}
{.. exec { throw #se; #slist } ccat ( \Return #t #v ) { #slist1 } ccat #cs ...}
{.. exec { throw #se; #slist } ccat ( #t #v0 ) { #slist1 } ...}
{.. exec { throw #se; #slist } ccat ( #t #v0 ) { #slist1 } ccat ( #t2 #v1 ) { #slist3 } ccat #cs ...}
{.. #expand-method-body(#mb); ...}
{.. final #t #v0; ...}
{.. final #t #v0; #v0 = #vi; ...}
{.. final #t #v0 = #vi; ...}
{.. #finishJavaCardTransaction; ...}
{.. { for(; #guard; #forupdates) #s } ...}
{.. for(; #guard; #forupdates) #s ...}
{.. { for(; #guard;) #s } ...}
{.. for(; #guard;) #s ...}
{.. for(#i; #e; #sel) {#s} ...}
{.. { #forInitUnfoldTransformer(#loopInit); for(; #guard; #forupdates) #s } ...}
{.. #forloop ...}
{.. { for(#loopInit; #guard; #forupdates) #s } ...}
{.. for(#loopInit; #guard; #forupdates) #s ...}
{.. { for(#loopInit; #guard;) #s } ...}
{.. for(#loopInit; #guard;) #s ...}
{.. #for-to-while(#innerLabel, #outerLabel, #forloop) ...}
{ .. for (#ty #id : #e) #stm ... }
{ .. for (#ty #id: #nse) #stm ... }
# {.. ghost #t #v0; ...}
# {.. ghost #t #v0; #v0 = #vi; ...}
# {.. ghost #t #v0 = #vi; ...}
{.. if(#e0) {#lhs = #e1;} else {#lhs = #e2;} ...}
{.. if (!#exBool0) #lhs=false; else #lhs=#nseBool1; ...}
{.. if (#exBool0) #lhs=true; else #lhs=#nseBool1; ...}
{.. if(#nse) #s0 ...}
{.. if(#nse) #s0 else #s1 ...}
{.. if ( #se == null ) { exec { throw new java.lang.NullPointerException (); } ccat ( #t #v0 ) { #slist1 } ccat ( #t2 #v1 ) { #slist3 } ccat #cs } else if ( #se instanceof #t ) { #t #v0; #v0 = (#t) #se; #slist1 } else { exec { throw #se; } ccat ( #t2 #v1 ) { #slist3 } ccat #cs } ...}
{.. if ( #se == null ) { exec { throw new java.lang.NullPointerException (); } ccat ( #t #v0 ) { #slist1 } } else if ( #se instanceof #t ) { #t #v0; #v0 = (#t) #se; #slist1 } else { throw #se; } ...}
{.. if ( #se == null ) { { #slist2 } throw new java.lang.NullPointerException (); } else { #typeof(#se) #v0 = #se; { #slist2 } throw #v0; } ...}
{.. if(#se==null){throw new java.lang.NullPointerException();} ...}
{.. if ( #se == null ) { try { throw new java.lang.NullPointerException (); } catch ( #t #v0 ) { #slist1 } catch #cs finally { #slist2 } } else if ( #se instanceof #t ) { try { #t #v0; #v0 = (#t) #se; #slist1 } finally { #slist2 } } else { try { throw #se; } catch #cs finally { #slist2 } } ...}
{.. if ( #se == null ) { try { throw new java.lang.NullPointerException (); } catch ( #t #v0 ) { #slist1 } catch ( #t2 #v1 ) { #slist3 } catch #cs } else if ( #se instanceof #t ) { #t #v0; #v0 = (#t) #se; #slist1 } else { try { throw #se; } catch ( #t2 #v1 ) { #slist3 } catch #cs } ...}
{.. if ( #se == null ) { try { throw new java.lang.NullPointerException (); } catch ( #t #v0 ) { #slist1 } } else if ( #se instanceof #t ) { #t #v0; #v0 = (#t) #se; #slist1 } else { throw #se; } ...}
{.. if (#se) #s0 ...}
{.. if(#se) #s0 ...}
{.. if (#se) #s0 else #s1 ...}
{.. if(#se) #s0 else #s1 ...}
{.. #jcsystemType.#abortTransaction()@#jcsystemType; ...}
{.. #jcsystemType.#beginTransaction()@#jcsystemType; ...}
{.. #jcsystemType.#commitTransaction()@#jcsystemType; ...}
{.. #jcsystemType.#setTransient(#se, #se1)@#jcsystemType; ...}
{.. #lb:{} ...}
{.. #lb0: break #lb1; ...}
{.. #lb0: {break #lb1; #slist } ...}
{.. #lb1: loop-scope(#lhs) { continue #lb; #slist } ...}
{.. #lb: loop-scope(#lhs) { continue #lb; #slist } ...}
{.. #lb: return #se; ...}
{.. #lb: { return #se; #slist } ...}
{.. #lb: #s ...}
{.. #lb: throw #se; ...}
{.. #lb: { throw #se; #slist } ...}
{.. #lhs0=#e0.#attribute%=#e; ...}
{.. #lhs0=#e0.#attribute&=#e; ...}
{.. #lhs0=#e0.#attribute*=#e; ...}
{.. #lhs0=#e0.#attribute+=#e; ...}
{.. #lhs0=#e0.#attribute-=#e; ...}
{.. #lhs0=#e0.#attribute/=#e; ...}
{.. #lhs0=#e0.#attribute<<=#e; ...}
{.. #lhs0=#e0.#attribute=#e; ...}
{.. #lhs0=#e0.#attribute>>=#e; ...}
{.. #lhs0=#e0.#attribute>>>=#e; ...}
{.. #lhs0=#e0.#attribute^=#e; ...}
{.. #lhs0=#e0.#attribute|=#e; ...}
{.. #lhs0=#e0[#e]%=#e1; ...}
{.. #lhs0=#e0[#e]&=#e1; ...}
{.. #lhs0=#e0[#e]*=#e1; ...}
{.. #lhs0=#e0[#e]+=#e1; ...}
{.. #lhs0=#e0[#e]-=#e1; ...}
{.. #lhs0=#e0[#e]/=#e1; ...}
{.. #lhs0=#e0[#e]<<=#e1; ...}
{.. #lhs0=#e0[#e]=#e1; ...}
{.. #lhs0=#e0[#e]>>=#e1; ...}
{.. #lhs0=#e0[#e]>>>=#e1; ...}
{.. #lhs0=#e0[#e]^=#e1; ...}
{.. #lhs0=#e0[#e]|=#e1; ...}
{.. #lhs0 = #e.#attribute++; ...}
{.. #lhs0 = #e.#attribute--; ...}
{.. #lhs0 = ++#e.#attribute; ...}
{.. #lhs0 = #e[#e0]++; ...}
{.. #lhs0 = #e[#e0]--; ...}
{.. #lhs0 = ++#e[#e0]; ...}
{.. #lhs0 = --#e[#e0]; ...}
{.. #lhs0 = #lhs1++; ...}
{.. #lhs0 = #lhs1--; ...}
{.. #lhs0 = ++#lhs1; ...}
{.. #lhs0 = --#lhs1; ...}
{.. #lhs0=#lhs1%=#e; ...}
{.. #lhs0=#lhs1&=#e; ...}
{.. #lhs0=#lhs1*=#e; ...}
{.. #lhs0=#lhs1+=#e; ...}
{.. #lhs0=#lhs1-=#e; ...}
{.. #lhs0=#lhs1/=#e; ...}
{.. #lhs0=#lhs1<<=#e; ...}
{.. #lhs0=#lhs1=#e; ...}
{.. #lhs0=#lhs1>>=#e; ...}
{.. #lhs0=#lhs1>>>=#e; ...}
{.. #lhs0=#lhs1^=#e; ...}
{.. #lhs0=#lhs1|=#e; ...}
{.. #lhs1++; ...}
{.. #lhs1--; ...}
{.. ++#lhs1; ...}
{.. --#lhs1; ...}
{.. #lhs1=#e; #lhs0=#lhs1; ...}
{.. #lhs1 = (#typeof(#lhs1))#lhs1-1; ...}
{.. #lhs1 = (#typeof(#lhs1))(#lhs1+1); ...}
{.. #lhs1 = (#typeof(#lhs1))(#lhs1-1); ...}
{.. #lhs1 = (#typeof(#lhs1))(#lhs1+1); #lhs0 = #lhs1; ...}
{.. #lhs1 = (#typeof(#lhs1))(#lhs1-1); #lhs0 = #lhs1; ...}
{.. #lhs1 = (#typeof(#lhs1))(#lhs1 % #e); #lhs0=#lhs1; ...}
{.. #lhs1 = (#typeof(#lhs1))(#lhs1 & #e); #lhs0=#lhs1; ...}
{.. #lhs1 = (#typeof(#lhs1))(#lhs1 * #e); #lhs0=#lhs1; ...}
{.. #lhs1 = (#typeof(#lhs1))(#lhs1 + #e); #lhs0=#lhs1; ...}
{.. #lhs1 = (#typeof(#lhs1))(#lhs1 - #e); #lhs0=#lhs1; ...}
{.. #lhs1 = (#typeof(#lhs1))(#lhs1 / #e); #lhs0=#lhs1; ...}
{.. #lhs1 = (#typeof(#lhs1))(#lhs1 << #e); #lhs0=#lhs1; ...}
{.. #lhs1 = (#typeof(#lhs1))(#lhs1 >> #e); #lhs0=#lhs1; ...}
{.. #lhs1 = (#typeof(#lhs1))(#lhs1 >>> #e); #lhs0=#lhs1; ...}
{.. #lhs1 = (#typeof(#lhs1))(#lhs1 ^ #e); #lhs0=#lhs1; ...}
{.. #lhs1 = (#typeof(#lhs1))(#lhs1 | #e); #lhs0=#lhs1; ...}
{.. #lhs = #arrayinitializer; ...}
{.. #lhs = (\bigint) #seAny; ...}
{.. #lhs = (boolean) #exBool; ...}
{.. #lhs = (byte) #nse; ...}
{.. #lhs = (byte) #seByte; ...}
{.. #lhs = (char) #seChar; ...}
{.. #lhs %= #e; ...}
{.. #lhs &= #e; ...}
{.. #lhs *= #e; ...}
{.. #lhs += #e; ...}
{.. #lhs -= #e; ...}
{.. #lhs /= #e; ...}
{.. #lhs <<= #e; ...}
{.. #lhs = #e; ...}
{.. #lhs = (#e); ...}
{.. #lhs >>= #e; ...}
{.. #lhs >>>= #e; ...}
{.. #lhs ^= #e; ...}
{.. #lhs |= #e; ...}
{.. (#lhs) = #e; ...}
{.. #lhs = #e0 ? #e1 : #e2; ...}
{.. #lhs = --#e.#attribute; ...}
{.. #lhs=#e % #nse; ...}
{.. #lhs=#e & #nse; ...}
{.. #lhs=#e * #nse; ...}
{.. #lhs=#e + #nse; ...}
{.. #lhs=#e - #nse; ...}
{.. #lhs=#e / #nse; ...}
{.. #lhs=#e << #nse; ...}
{.. #lhs=#e >> #nse; ...}
{.. #lhs=#e >>> #nse; ...}
{.. #lhs=#e ^ #nse; ...}
{.. #lhs=#e | #nse; ...}
{.. #lhs = #e != #nse0; ...}
{.. #lhs = #e < #nse0; ...}
{.. #lhs = #e <= #nse0; ...}
{.. #lhs = #e == #nse0; ...}
{.. #lhs = #e > #nse0; ...}
{.. #lhs = #e >= #nse0; ...}
{.. #lhs = #exBool; ...}
{.. #lhs=#exBool0 && #nseBool1; ...}
{.. #lhs=#exBool0 || #nseBool1; ...}
{.. #lhs = false; ...}
{.. #lhs = (int) #nse; ...}
{.. #lhs = (int) #seByteShortInt; ...}
{.. #lhs = (int) #seChar; ...}
{.. #lhs = #jcsystemType.#getTransient(#se)@#jcsystemType; ...}
{.. #lhs = (long) #nse; ...}
{.. #lhs = (long) #seByteShortInt; ...}
{.. #lhs = (long) #seChar; ...}
{.. #lhs = (long) #seLong; ...}
{.. #lhs = #n; ...}
{.. #lhs = #na; ...}
{.. #lhs = (#npit) #nse; ...}
{.. #lhs = (#npit) #se; ...}
{.. #lhs=~#nse; ...}
{.. #lhs = #nse0 != #se; ...}
{.. #lhs = #nse0 < #se; ...}
{.. #lhs = #nse0 <= #se; ...}
{.. #lhs = #nse0 == #se; ...}
{.. #lhs = #nse0 > #se; ...}
{.. #lhs = #nse0 >= #se; ...}
{.. #lhs=!#nseBool; ...}
{.. #lhs=#nseBool0 & #exBool1; ...}
{.. #lhs=#nseBool0 ^ #exBool1; ...}
{.. #lhs=#nseBool0 | #exBool1; ...}
{.. #lhs=#nseBool0 && #seBool1; ...}
{.. #lhs=#nseBool0 || #seBool1; ...}
{.. #lhs = #nse.#mn(#elist); ...}
{.. #lhs=#nse % #se; ...}
{.. #lhs=#nse & #se; ...}
{.. #lhs=#nse * #se; ...}
{.. #lhs=#nse + #se; ...}
{.. #lhs=#nse - #se; ...}
{.. #lhs=#nse / #se; ...}
{.. #lhs=#nse << #se; ...}
{.. #lhs=#nse >> #se; ...}
{.. #lhs=#nse >>> #se; ...}
{.. #lhs=#nse ^ #se; ...}
{.. #lhs=#nse | #se; ...}
{.. #lhs = #nse ? #se1 : #se2; ...}
{.. #lhs = #nsmr; ...}
{.. #lhs = #nsn; ...}
{.. #lhs = #se0 != #se1; ...}
{.. #lhs = #se0 < #se1; ...}
{.. #lhs = #se0 <= #se1; ...}
{.. #lhs = #se0 == #se1; ...}
{.. #lhs = #se0 > #se1; ...}
{.. #lhs = #se0 >= #se1; ...}
{.. #lhs = #se0 ? #se1 : #se2; ...}
{.. #lhs = #seAny; ...}
{.. #lhs=!#seBool; ...}
{.. #lhs=#seBool0 & #seBool1; ...}
{.. #lhs=#seBool0 && #seBool1; ...}
{.. #lhs=#seBool0 ^ #seBool1; ...}
{.. #lhs=#seBool0 | #seBool1; ...}
{.. #lhs=#seBool0 || #seBool1; ...}
{.. #lhs = #seByte; ...}
{.. #lhs = #seByteShortInt; ...}
{.. #lhs = #seChar; ...}
{.. #lhs = #seLong; ...}
{.. #lhs = #se.#mn(#elist); ...}
{.. #lhs = #se.#mn(#selist); ...}
{.. #lhs = #seShort; ...}
{.. #lhs = (short) #nse; ...}
{.. #lhs = (short) #seByte; ...}
{.. #lhs = (short) #seShort; ...}
{.. #lhs = #sv; ...}
{.. #lhs = @(#sv); ...}
{.. #lhs = #t.#mn(#elist); ...}
{.. #lhs = @(#t.#mn(#elist)); ...}
{.. #lhs = true; ...}
{.. { #lhs = true; break #lb; } ...}
{.. #lhs = true; continue #lb; ...}
{.. #lhs = true; return; ...}
{.. #lhs = true; return #se; ...}
{.. #lhs = true; throw #se; ...}
{.. #lhs = (#typeof(#lhs))(#lhs % (#e)); ...}
{.. #lhs = (#typeof(#lhs))(#lhs & (#e)); ...}
{.. #lhs = (#typeof(#lhs))(#lhs * (#e)); ...}
{.. #lhs = (#typeof(#lhs))(#lhs + (#e)); ...}
{.. #lhs = (#typeof(#lhs))(#lhs - (#e)); ...}
{.. #lhs = (#typeof(#lhs))(#lhs / (#e)); ...}
{.. #lhs = (#typeof(#lhs))(#lhs << (#e)); ...}
{.. #lhs = (#typeof(#lhs))(#lhs >> (#e)); ...}
{.. #lhs = (#typeof(#lhs))(#lhs >>> (#e)); ...}
{.. #lhs = (#typeof(#lhs))(#lhs ^ (#e)); ...}
{.. #lhs = (#typeof(#lhs))(#lhs | (#e)); ...}
{.. #lhs = #v.#sv; ...}
{.. #loc = (byte) #seBigint; ...}
{.. #loc = (byte) #seInt; ...}
{.. #loc = (byte) #seLong; ...}
{.. #loc = (byte) #seShort; ...}
{.. #loc = (char) #seBigint; ...}
{.. #loc = (char) #seByte; ...}
{.. #loc = (char) #seInt; ...}
{.. #loc = (char) #seLong; ...}
{.. #loc = (char) #seShort; ...}
{.. #loc=false; ...}
{.. { #loc=false; } ...}
{.. #loc=false; if (#loc) #s0 ...}
{.. { #loc=false; } if (#loc) #s0 ...}
{.. #loc=false; if (#loc) #s0 else #s1 ...}
{.. { #loc=false; } if (#loc) #s0 else #s1 ...}
{.. #loc=false; #s1 ...}
{.. { #loc=false; } #s1 ...}
{.. #loc = (int) #seBigint; ...}
{.. #loc = (int) #seLong; ...}
{.. #loc = (long) #seBigint; ...}
{.. #loc = #se; ...}
{.. #loc = ~ #se; ...}
{.. #loc=#se0 % #se1; ...}
{.. #loc = #seAny * #seBigint; ...}
{.. #loc = #seAny - #seBigint; ...}
{.. #loc=#seAny % #seBigint; ...}
{.. #loc=#seAny + #seBigint; ...}
{.. #loc=#seAny / #seBigint; ...}
{.. #loc = - #seBigint; ...}
{.. #loc = #seBigint * #seAny; ...}
{.. #loc = #seBigint - #seAny; ...}
{.. #loc=#seBigint % #seAny; ...}
{.. #loc=#seBigint + #seAny; ...}
{.. #loc=#seBigint / #seAny; ...}
{.. #loc = - #seCharByteShortInt; ...}
{.. #loc=#seCharByteShortInt0 << #se; ...}
{.. #loc=#seCharByteShortInt0 >> #se; ...}
{.. #loc=#seCharByteShortInt0 >>> #se; ...}
{.. #loc = #seCharByteShortInt0 * #seCharByteShortInt1; ...}
{.. #loc = #seCharByteShortInt0 - #seCharByteShortInt1; ...}
{.. #loc=#seCharByteShortInt0 & #seCharByteShortInt1; ...}
{.. #loc=#seCharByteShortInt0 + #seCharByteShortInt1; ...}
{.. #loc=#seCharByteShortInt0 / #seCharByteShortInt1; ...}
{.. #loc=#seCharByteShortInt0 ^ #seCharByteShortInt1; ...}
{.. #loc=#seCharByteShortInt0 | #seCharByteShortInt1; ...}
{.. #loc=#seCharByteShortInt & #seLong; ...}
{.. #loc=#seCharByteShortInt * #seLong; ...}
{.. #loc=#seCharByteShortInt + #seLong; ...}
{.. #loc=#seCharByteShortInt - #seLong; ...}
{.. #loc=#seCharByteShortInt ^ #seLong; ...}
{.. #loc=#seCharByteShortInt | #seLong; ...}
{.. #loc = - #seLong; ...}
{.. #loc=#seLong0 << #se; ...}
{.. #loc=#seLong0 >> #se; ...}
{.. #loc=#seLong0 >>> #se; ...}
{.. #loc=#seLong0 & #seLong1; ...}
{.. #loc=#seLong0 * #seLong1; ...}
{.. #loc=#seLong0 + #seLong1; ...}
{.. #loc=#seLong0 - #seLong1; ...}
{.. #loc=#seLong0 ^ #seLong1; ...}
{.. #loc=#seLong0 | #seLong1; ...}
{.. #loc=#seLong & #seCharByteShortInt; ...}
{.. #loc=#seLong * #seCharByteShortInt; ...}
{.. #loc=#seLong + #seCharByteShortInt; ...}
{.. #loc=#seLong - #seCharByteShortInt; ...}
{.. #loc=#seLong / #seCharByteShortInt; ...}
{.. #loc=#seLong ^ #seCharByteShortInt; ...}
{.. #loc=#seLong | #seCharByteShortInt; ...}
{.. #loc=#se / #seLong; ...}
{.. #loc = (short) #seBigint; ...}
{.. #loc = (short) #seInt; ...}
{.. #loc = (short) #seLong; ...}
{.. #loc=true; if (#loc) #s0 ...}
{.. { #loc=true; } if (#loc) #s0 ...}
{.. #loc=true; if (#loc) #s0 else #s1 ...}
{.. { #loc=true;} if (#loc) #s0 else #s1 ...}
{.. #loc=true; #s0 ...}
{.. { #loc=true; } #s0 ...}
{.. { #loc=true;} #s0 ...}
{.. #loc = @(#v.#sv); ...}
{.. loop-scope(#lhs) { break #lb; #slist } ...}
{.. loop-scope(#lhs) { break; #slist } ...}
{.. loop-scope(#lhs) { continue #lb; #slist } ...}
{.. loop-scope(#lhs) { continue; #slist } ...}
{.. loop-scope(#lhs) { return #se; #slist } ...}
{.. loop-scope(#lhs) { return; #slist } ...}
{.. loop-scope(#lhs) { throw #se; #slist } ...}
{.. #mb ...}
{.. merge_point(#lhs); ...}
{.. #method-call(#ex, #mn(#elist)); ...}
{.. #method-call(#ex, super.#mn(#elist)); ...}
{.. #method-call(#mn(#elist)); ...}
{.. #method-call(#se.#mn(#selist)); ...}
{.. #method-call(#t.#mn(#elist)); ...}
{.. #method-call(#v0, #se.#mn(#elist)); ...}
{.. method-frame(#ex):{} ...}
{.. method-frame(#ex):{return #se; #slist} ...}
{.. method-frame(#ex):{return; #slist} ...}
{.. method-frame(#ex):{throw #se; #slist} ...}
{.. method-frame(#ex):{ #v0 = #se; } ...}
{.. method-frame(#v0, #ex):{} ...}
{.. method-frame(#v0, #ex):{return #se; #slist} ...}
{.. method-frame(#v0, #ex):{throw #se; #slist} ...}
{.. #mn(#elist); ...}
{.. #multvardecl ...}
{.. #n ...}
{.. #nse.#mn(#elist); ...}
{.. #nsmr ...}
{.. #nsn ...}
{.. #reattachLoopInvariant(while (#nse) #body); ... }
{.. #resolve-multiple-var-decl(#multvardecl); ...}
{.. { return; } ...}
{.. return; ...}
{.. return #nse; ...}
{.. { return #se; } ...}
{.. return #se; ...}
{.. {return #se; #slist} ...}
{.. {return; #slist} ...}
{.. #s ...}
{.. #s0 ...}
{.. #s1 ...}
{.. #scr ...}
{.. #se.#mn(#elist); ...}
{.. #se.#mn(#selist); ...}
{.. { #slist } ...}
{.. { { #slist } } ...}
{.. { #slist1 } ...}
{.. { #slist2 } ...}
{.. { #slist2 } break; ...}
{.. { #slist2 } break #lb; ...}
{.. { #slist2 } continue; ...}
{.. { #slist2 } continue #lb; ...}
{.. { #slist2 } return; ...}
{.. { #slist } { #slist1 } ...}
{.. { { #slist } { #slist1 } } ...}
{.. #special-constructor-call(#scr); ...}
{.. #static-initialisation(#mn(#elist)); #method-call(#ex, #mn(#elist)); ...}
{.. #static-initialisation(#mn(#elist)); #typeof(#lhs) #v0; #method-call(#ex, #v0, #mn(#elist)); #lhs = #v0; ...}
{.. #static-initialisation(#se.#mn(#elist)); #method-call(#v0, #se.#mn(#elist)); ...}
{.. #static-initialisation(#se.#mn(#elist)); #typeof(#lhs) #v0; #method-call(#v0, #se.#mn(#elist)); #lhs = #v0; ...}
{.. #static-initialisation(#sv); #lhs = @(#sv); ...}
{.. #static-initialisation(#t.#mn(#elist)); #method-call(#t.#mn(#elist)); ...}
{.. #static-initialisation(#t.#mn(#elist)); #typeof(#lhs) #v0; #method-call(#v0, #t.#mn(#elist)); #lhs = #v0; ...}
{.. #sv = #arr[#idx]; ...}
{.. #sv = (byte) #seShortIntLong; ...}
{.. #sv = (char) #seByteShortIntLong; ...}
{.. #sv = #e; ...}
{.. #sv = (int) #seLong; ...}
{.. #sv = - #left; ...}
{.. #sv = ~ #left; ...}
{.. #sv = #left % #right; ...}
{.. #sv = #left & #right; ...}
{.. #sv = #left * #right; ...}
{.. #sv = #left + #right; ...}
{.. #sv = #left - #right; ...}
{.. #sv = #left / #right; ...}
{.. #sv=#left << #right; ...}
{.. #sv=#left >> #right; ...}
{.. #sv=#left >>> #right; ...}
{.. #sv=#left ^ #right; ...}
{.. #sv=#left | #right; ...}
{.. @(#sv) = #se; ...}
{.. #sv = (short) #seIntLong; ...}
{.. #sv = #v1.#a; ...}
{.. #sw ...}
{.. #switch-to-if(#sw) ...}
{.. synchronized(#cr){} ...}
{.. synchronized(#nsencr){ #slist } ...}
{.. synchronized(#se){} ...}
{.. this[#nse]=#se0; ...}
{.. throw #e; ...}
{.. {throw #e; #slist} ...}
{.. throw new java.lang.ArithmeticException(); ...}
{.. throw new java.lang.ArrayIndexOutOfBoundsException(); ...}
{.. throw new java.lang.ArrayStoreException(); ...}
{.. throw new java.lang.AssertionError(); ...}
{.. throw new java.lang.AssertionError((java.lang.Object)null); ...}
{.. throw new java.lang.AssertionError(#se2); ...}
{.. throw new java.lang.ClassCastException(); ...}
{.. throw new java.lang.NullPointerException(); ...}
{.. throw #nse; ...}
{.. throw null; ...}
{.. throw #se; ...}
{.. #t.#mn(#elist); ...}
{.. @(#t.#mn(#elist)); ...}
{.. try { break #lb; #slist } catch #cs ...}
{.. try { break #lb; #slist } catch #cs finally { #slist2 } ...}
{.. try { break; #slist } catch #cs ...}
{.. try { break; #slist } catch #cs finally { #slist2 } ...}
{.. try {} catch #cs finally { #slist2 } ...}
{.. try { continue #lb; #slist } catch #cs ...}
{.. try { continue #lb; #slist } catch #cs finally { #slist2 } ...}
{.. try { continue; #slist } catch #cs ...}
{.. try { continue; #slist } catch #cs finally { #slist2 } ...}
{.. try {} #cs ...}
{.. try { return #se; #slist } catch #cs ...}
{.. try { return #se; #slist } catch #cs finally { #slist2 } ...}
{.. try { return; #slist } catch #cs ...}
{.. try { return; #slist } catch #cs finally { #slist2 } ...}
{.. try { throw #se; #slist } catch ( #t #v0 ) { #slist1 } ...}
{.. try { throw #se; #slist} catch ( #t #v0 ) { #slist1 } catch #cs finally { #slist2 } ...}
{.. try { throw #se; #slist } catch ( #t #v0 ) { #slist1 } catch ( #t2 #v1 ) { #slist3 } catch #cs ...}
{.. try { throw #se; #slist } finally { #slist2 } ...}
{.. #t #v0; ...}
{.. #t #v0; #v0 = #vi; ...}
{.. #t #v0 = #vi; ...}
{.. { #t #v; #v = (#t) #se; #slist1 } ...}
{ .. { #typeof(#a) #a = #e; for(int #v0 = 0; #v0 < #length-reference(#a); #v0 ++) { #ty #id = #a[#v0]; #stm } } ... }
{.. #typeof(#a) #v0 = #v1.#a; #static-initialisation(#sv); @(#sv) = #v0; ...}
{.. #typeof(#a) #v0 = #v1.#a; @(#sv) = #v0; ...}
{.. #typeof(#e0) #v0=#e0; #typeof(#e) #v1=#e; #v0[#v1]=#e1; #lhs0=#v0[#v1]; ...}
{.. #typeof(#e0) #v0=#e0; #typeof(#e) #v1=#e; #v0[#v1] = (#typeof(#e0[#e]))(#v0[#v1] % #e1); ...}
{.. #typeof(#e0) #v0=#e0; #typeof(#e) #v1=#e; #v0[#v1] = (#typeof(#e0[#e]))(#v0[#v1] & #e1); ...}
{.. #typeof(#e0) #v0=#e0; #typeof(#e) #v1=#e; #v0[#v1] = (#typeof(#e0[#e]))(#v0[#v1] * #e1); ...}
{.. #typeof(#e0) #v0=#e0; #typeof(#e) #v1=#e; #v0[#v1] = (#typeof(#e0[#e]))(#v0[#v1] + #e1); ...}
{.. #typeof(#e0) #v0=#e0; #typeof(#e) #v1=#e; #v0[#v1] = (#typeof(#e0[#e]))(#v0[#v1] - #e1); ...}
{.. #typeof(#e0) #v0=#e0; #typeof(#e) #v1=#e; #v0[#v1] = (#typeof(#e0[#e]))(#v0[#v1] / #e1); ...}
{.. #typeof(#e0) #v0=#e0; #typeof(#e) #v1=#e; #v0[#v1] = (#typeof(#e0[#e]))(#v0[#v1] << #e1); ...}
{.. #typeof(#e0) #v0=#e0; #typeof(#e) #v1=#e; #v0[#v1] = (#typeof(#e0[#e]))(#v0[#v1] >> #e1); ...}
{.. #typeof(#e0) #v0=#e0; #typeof(#e) #v1=#e; #v0[#v1] = (#typeof(#e0[#e]))(#v0[#v1] >>> #e1); ...}
{.. #typeof(#e0) #v0=#e0; #typeof(#e) #v1=#e; #v0[#v1] = (#typeof(#e0[#e]))(#v0[#v1] ^ #e1); ...}
{.. #typeof(#e0) #v0=#e0; #typeof(#e) #v1=#e; #v0[#v1] = (#typeof(#e0[#e]))(#v0[#v1] | #e1); ...}
{.. #typeof(#e0) #v0=#e0; #typeof(#e) #v1=#e; #v0[#v1]= (#typeof(#e0[#e]))(#v0[#v1] % #e1); #lhs0=#v0[#v1]; ...}
{.. #typeof(#e0) #v0=#e0; #typeof(#e) #v1=#e; #v0[#v1]= (#typeof(#e0[#e]))(#v0[#v1] & #e1); #lhs0=#v0[#v1]; ...}
{.. #typeof(#e0) #v0=#e0; #typeof(#e) #v1=#e; #v0[#v1]= (#typeof(#e0[#e]))(#v0[#v1] * #e1); #lhs0=#v0[#v1]; ...}
{.. #typeof(#e0) #v0=#e0; #typeof(#e) #v1=#e; #v0[#v1]= (#typeof(#e0[#e]))(#v0[#v1] + #e1); #lhs0=#v0[#v1]; ...}
{.. #typeof(#e0) #v0=#e0; #typeof(#e) #v1=#e; #v0[#v1]= (#typeof(#e0[#e]))(#v0[#v1] - #e1); #lhs0=#v0[#v1]; ...}
{.. #typeof(#e0) #v0=#e0; #typeof(#e) #v1=#e; #v0[#v1]= (#typeof(#e0[#e]))(#v0[#v1] / #e1); #lhs0=#v0[#v1]; ...}
{.. #typeof(#e0) #v0=#e0; #typeof(#e) #v1=#e; #v0[#v1]= (#typeof(#e0[#e]))(#v0[#v1] << #e1); #lhs0=#v0[#v1]; ...}
{.. #typeof(#e0) #v0=#e0; #typeof(#e) #v1=#e; #v0[#v1]= (#typeof(#e0[#e]))(#v0[#v1] >> #e1); #lhs0=#v0[#v1]; ...}
{.. #typeof(#e0) #v0=#e0; #typeof(#e) #v1=#e; #v0[#v1]= (#typeof(#e0[#e]))(#v0[#v1] >>> #e1); #lhs0=#v0[#v1]; ...}
{.. #typeof(#e0) #v0=#e0; #typeof(#e) #v1=#e; #v0[#v1]= (#typeof(#e0[#e]))(#v0[#v1] ^ #e1); #lhs0=#v0[#v1]; ...}
{.. #typeof(#e0) #v0=#e0; #typeof(#e) #v1=#e; #v0[#v1]= (#typeof(#e0[#e]))(#v0[#v1] | #e1); #lhs0=#v0[#v1]; ...}
{.. #typeof(#e0) #v0=#e0; #v0.#attribute=#e; #lhs0=#v0.#attribute; ...}
{.. #typeof(#e0) #v0=#e0; #v0.#attribute = (#typeof(#attribute))(#v0.#attribute % #e); #lhs0=#v0.#attribute; ...}
{.. #typeof(#e0) #v0=#e0; #v0.#attribute = (#typeof(#attribute))(#v0.#attribute & #e); #lhs0=#v0.#attribute; ...}
{.. #typeof(#e0) #v0=#e0; #v0.#attribute = (#typeof(#attribute))(#v0.#attribute * #e); #lhs0=#v0.#attribute; ...}
{.. #typeof(#e0) #v0=#e0; #v0.#attribute = (#typeof(#attribute))(#v0.#attribute + #e); #lhs0=#v0.#attribute; ...}
{.. #typeof(#e0) #v0=#e0; #v0.#attribute = (#typeof(#attribute))(#v0.#attribute - #e); #lhs0=#v0.#attribute; ...}
{.. #typeof(#e0) #v0=#e0; #v0.#attribute = (#typeof(#attribute))(#v0.#attribute / #e); #lhs0=#v0.#attribute; ...}
{.. #typeof(#e0) #v0=#e0; #v0.#attribute = (#typeof(#attribute))(#v0.#attribute << #e); #lhs0=#v0.#attribute; ...}
{.. #typeof(#e0) #v0=#e0; #v0.#attribute = (#typeof(#attribute))(#v0.#attribute >> #e); #lhs0=#v0.#attribute; ...}
{.. #typeof(#e0) #v0=#e0; #v0.#attribute = (#typeof(#attribute))(#v0.#attribute >>> #e); #lhs0=#v0.#attribute; ...}
{.. #typeof(#e0) #v0=#e0; #v0.#attribute = (#typeof(#attribute))(#v0.#attribute ^ #e); #lhs0=#v0.#attribute; ...}
{.. #typeof(#e0) #v0=#e0; #v0.#attribute = (#typeof(#attribute))(#v0.#attribute | #e); #lhs0=#v0.#attribute; ...}
{.. #typeof(#e0) #v=#e0; #v.#attribute = (#typeof(#attribute))(#v.#attribute % #e); ...}
{.. #typeof(#e0) #v=#e0; #v.#attribute = (#typeof(#attribute))(#v.#attribute & #e); ...}
{.. #typeof(#e0) #v=#e0; #v.#attribute = (#typeof(#attribute))(#v.#attribute * #e); ...}
{.. #typeof(#e0) #v=#e0; #v.#attribute = (#typeof(#attribute))(#v.#attribute + #e); ...}
{.. #typeof(#e0) #v=#e0; #v.#attribute = (#typeof(#attribute))(#v.#attribute - #e); ...}
{.. #typeof(#e0) #v=#e0; #v.#attribute = (#typeof(#attribute))(#v.#attribute / #e); ...}
{.. #typeof(#e0) #v=#e0; #v.#attribute = (#typeof(#attribute))(#v.#attribute << #e); ...}
{.. #typeof(#e0) #v=#e0; #v.#attribute = (#typeof(#attribute))(#v.#attribute >> #e); ...}
{.. #typeof(#e0) #v=#e0; #v.#attribute = (#typeof(#attribute))(#v.#attribute >>> #e); ...}
{.. #typeof(#e0) #v=#e0; #v.#attribute = (#typeof(#attribute))(#v.#attribute ^ #e); ...}
{.. #typeof(#e0) #v=#e0; #v.#attribute = (#typeof(#attribute))(#v.#attribute | #e); ...}
{.. #typeof(#e) #v0 = #e; #static-initialisation(#sv); @(#sv) = #v0; ...}
{.. #typeof(#e) #v0 = #e; @(#sv) = #v0; ...}
{.. #typeof(#e) #v0=#e; #typeof(#nse0) #v1 = #nse0; #lhs = #v0 != #v1; ...}
{.. #typeof(#e) #v0=#e; #typeof(#nse0) #v1 = #nse0; #lhs = #v0 < #v1; ...}
{.. #typeof(#e) #v0=#e; #typeof(#nse0) #v1 = #nse0; #lhs = #v0 <= #v1; ...}
{.. #typeof(#e) #v0=#e; #typeof(#nse0) #v1 = #nse0; #lhs = #v0 == #v1; ...}
{.. #typeof(#e) #v0=#e; #typeof(#nse0) #v1 = #nse0; #lhs = #v0 > #v1; ...}
{.. #typeof(#e) #v0=#e; #typeof(#nse0) #v1 = #nse0; #lhs = #v0 >= #v1; ...}
{.. #typeof(#e) #v0=#e; #typeof(#nse) #v1=#nse; #lhs=#v0 % #v1; ...}
{.. #typeof(#e) #v0=#e; #typeof(#nse) #v1=#nse; #lhs=#v0 & #v1; ...}
{.. #typeof(#e) #v0=#e; #typeof(#nse) #v1=#nse; #lhs=#v0 * #v1; ...}
{.. #typeof(#e) #v0=#e; #typeof(#nse) #v1=#nse; #lhs=#v0 + #v1; ...}
{.. #typeof(#e) #v0=#e; #typeof(#nse) #v1=#nse; #lhs=#v0 - #v1; ...}
{.. #typeof(#e) #v0=#e; #typeof(#nse) #v1=#nse; #lhs=#v0 / #v1; ...}
{.. #typeof(#e) #v0=#e; #typeof(#nse) #v1=#nse; #lhs=#v0 << #v1; ...}
{.. #typeof(#e) #v0=#e; #typeof(#nse) #v1=#nse; #lhs=#v0 >> #v1; ...}
{.. #typeof(#e) #v0=#e; #typeof(#nse) #v1=#nse; #lhs=#v0 >>> #v1; ...}
{.. #typeof(#e) #v0=#e; #typeof(#nse) #v1=#nse; #lhs=#v0 ^ #v1; ...}
{.. #typeof(#e) #v0=#e; #typeof(#nse) #v1=#nse; #lhs=#v0 | #v1; ...}
{.. #typeof(#e) #v=#e; #typeof(#e0) #v0=#e0; #typeof(#lhs0) #v1=#v[#v0]; #v[#v0] = (#typeof(#e[#e0]))(#v[#v0]+1); #lhs0=#v1; ...}
{.. #typeof(#e) #v=#e; #typeof(#e0) #v0=#e0; #typeof(#lhs0) #v1=#v[#v0]; #v[#v0] = (#typeof(#e[#e0]))(#v[#v0]-1); #lhs0 = #v1; ...}
{.. #typeof(#e) #v=#e; #typeof(#e0) #v0=#e0; #v[#v0]=(#typeof(#e[#e0]))(#v[#v0]+1); ...}
{.. #typeof(#e) #v=#e; #typeof(#e0) #v0=#e0; #v[#v0]=(#typeof(#e[#e0]))(#v[#v0]-1); ...}
{.. #typeof(#e) #v=#e; #typeof(#e0) #v0=#e0; #v[#v0] = (#typeof(#e[#e0]))(#v[#v0]+1); #lhs0=#v[#v0]; ...}
{.. #typeof(#e) #v=#e; #typeof(#e0) #v0=#e0; #v[#v0] = (#typeof(#e[#e0]))(#v[#v0]-1); #lhs0 = #v[#v0]; ...}
{.. #typeof(#e) #v=#e; #typeof(#lhs0) #v1=#v.#attribute; #v.#attribute = (#typeof(#attribute))(#v.#attribute+1); #lhs0 = #v1; ...}
{.. #typeof(#e) #v=#e; #typeof(#lhs0) #v1=#v.#attribute; #v.#attribute = (#typeof(#attribute))(#v.#attribute-1); #lhs0 = #v1; ...}
{.. #typeof(#e) #v=#e; #v.#attribute = (#typeof(#attribute))(#v.#attribute+1); ...}
{.. #typeof(#e) #v=#e; #v.#attribute = (#typeof(#attribute))(#v.#attribute-1); ...}
{.. #typeof(#e) #v=#e; #v.#attribute = (#typeof(#attribute))(#v.#attribute+1); #lhs0=#v.#attribute; ...}
{.. #typeof(#e) #v=#e; #v.#attribute = (#typeof(#attribute))(#v.#attribute-1); #lhs = #v.#attribute; ...}
{.. #typeof(#lhs0) #v = #lhs1; #lhs1 = (#typeof(#lhs1))(#lhs1+1); #lhs0 = #v; ...}
{.. #typeof(#lhs0) #v = #lhs1; #lhs1 = (#typeof(#lhs1))(#lhs1-1); #lhs0 = #v; ...}
{.. #typeof(#lhs) #v0; #init-array-creation(#v0, #arrayinitializer); #lhs = #v0; ...}
{.. #typeof(#lhs) #v0; #method-call(#ex, #v0, #mn(#elist)); #lhs = #v0; ...}
{.. #typeof(#lhs) #v0; #method-call(#ex, #v0, super.#mn(#elist)); #lhs = #v0; ...}
{.. #typeof(#lhs) #v0; #method-call(#v0, #se.#mn(#elist)); #lhs = #v0; ...}
{.. #typeof(#lhs) #v0; #method-call(#v0, #se.#mn(#selist)); #lhs = #v0; ...}
{.. #typeof(#lhs) #v0; #method-call(#v0, #t.#mn(#elist)); #lhs = #v0; ...}
{.. #typeof(#na) #v0; #init-array-creation(#v0, #na); #lhs = #v0; ...}
{.. #typeof(#nse0) #v0 = #nse0; #lhs = #v0 != #se; ...}
{.. #typeof(#nse0) #v0 = #nse0; #lhs = #v0 < #se; ...}
{.. #typeof(#nse0) #v0 = #nse0; #lhs = #v0 <= #se; ...}
{.. #typeof(#nse0) #v0 = #nse0; #lhs = #v0 == #se; ...}
{.. #typeof(#nse0) #v0 = #nse0; #lhs = #v0 > #se; ...}
{.. #typeof(#nse0) #v0 = #nse0; #lhs = #v0 >= #se; ...}
{.. #typeof(#nse1) #condition = #nse1; assert #condition; ...}
{.. #typeof(#nse1) #condition = #nse1; assert #condition : #e; ...}
{.. #typeof(#nse2) #message = #nse2; assert #se1 : #message; ...}
{.. #typeof(#nseLeft) #vLeftNew=#nseLeft; #v = \indexOf(#vLeftNew, #eRight); ...}
{.. #typeof(#nseLeft) #vLeftNew=#nseLeft; #v = \intersect(#vLeftNew, #eRight); ...}
{.. #typeof(#nseLeft) #vLeftNew=#nseLeft; #v = \seq_concat(#vLeftNew, #eRight); ...}
{.. #typeof(#nseLeft) #vLeftNew=#nseLeft; #v = \seq_get(#vLeftNew, #eRight); ...}
{.. #typeof(#nseLeft) #vLeftNew=#nseLeft; #v = \seq_sub(#vLeftNew, #eMiddle, #eRight); ...}
{.. #typeof(#nseLeft) #vLeftNew=#nseLeft; #v = \set_minus(#vLeftNew, #eRight); ...}
{.. #typeof(#nseLeft) #vLeftNew=#nseLeft; #v = \set_union(#vLeftNew, #eRight); ...}
{.. #typeof(#nseMiddle) #vMiddleNew=#nseMiddle; #v = \seq_sub(#seLeft, #vMiddleNew, #eRight); ...}
{.. #typeof(#nsencr) #loc=#nsencr; synchronized(#loc){ #slist } ...}
{.. #typeof(#nseObj) #vObjNew=#nseObj; #v = \all_fields(#vObjNew); ...}
{.. #typeof(#nseObj) #vObjNew=#nseObj; #v = \singleton(#vObjNew.#a); ...}
{.. #typeof(#nseRight) #vRightNew=#nseRight; #v = \indexOf(#seLeft, #vRightNew); ...}
{.. #typeof(#nseRight) #vRightNew=#nseRight; #v = \intersect(#seLeft, #vRightNew); ...}
{.. #typeof(#nseRight) #vRightNew=#nseRight; #v = \seq_concat(#seLeft, #vRightNew); ...}
{.. #typeof(#nseRight) #vRightNew=#nseRight; #v = \seq_get(#seLeft, #vRightNew); ...}
{.. #typeof(#nseRight) #vRightNew=#nseRight; #v = \seq_sub(#seLeft, #seMiddle, #vRightNew); ...}
{.. #typeof(#nseRight) #vRightNew=#nseRight; #v = \set_minus(#seLeft, #vRightNew); ...}
{.. #typeof(#nseRight) #vRightNew=#nseRight; #v = \set_union(#seLeft, #vRightNew); ...}
{ .. #typeof(#nse) #v0 = #nse; for (#ty #id: #v0) #stm ... }
{.. #typeof(#nse) #v0 = #nse; #lhs = -#v0; ...}
{.. #typeof(#nse) #v0 = #nse; #lhs = #v0 ? #se1 : #se2; ...}
{.. #typeof(#nse) #v0=#nse; return #v0; ...}
{.. #typeof(#nse) #v0=#nse; this[#v0]=#se0; ...}
{.. #typeof(#nse) #v0 = #nse; throw #v0; ...}
{.. #typeof(#nse) #v0; #v0 = #nse; #lhs = #v0.#mn(#elist); ...}
{.. #typeof(#nse) #v0; #v0 = #nse; #v0.#mn(#elist); ...}
{.. #typeof(#nse) #v1=#nse; #lhs=~#v1 ; ...}
{.. #typeof(#nse) #v1=#nse; #v.#a=#v1;...}
{.. #typeof(#nse) #vNew=#nse; #v = \seq_length(#vNew); ...}
{.. #typeof(#nse) #vNew=#nse; #v = \seq_reverse(#vNew); ...}
{.. #typeof(#nse) #vNew=#nse; #v = \seq_singleton(#vNew); ...}
{.. #typeof(#nse) #v = #nse; #lhs = (byte) #v; ...}
{.. #typeof(#nse) #v = #nse; #lhs = (int) #v; ...}
{.. #typeof(#nse) #v = #nse; #lhs = (long) #v; ...}
{.. #typeof(#nse) #v = #nse; #lhs = (#npit) #v; ...}
{.. #typeof(#nse) #v = #nse; #lhs = (short) #v; ...}
{.. #typeof(#nse) #v=#nse; #lhs=#v % #se; ...}
{.. #typeof(#nse) #v=#nse; #lhs=#v & #se; ...}
{.. #typeof(#nse) #v=#nse; #lhs=#v * #se; ...}
{.. #typeof(#nse) #v=#nse; #lhs=#v + #se; ...}
{.. #typeof(#nse) #v=#nse; #lhs=#v - #se; ...}
{.. #typeof(#nse) #v=#nse; #lhs=#v / #se; ...}
{.. #typeof(#nse) #v=#nse; #lhs=#v << #se; ...}
{.. #typeof(#nse) #v=#nse; #lhs=#v >> #se; ...}
{.. #typeof(#nse) #v=#nse; #lhs=#v >>> #se; ...}
{.. #typeof(#nse) #v=#nse; #lhs=#v ^ #se; ...}
{.. #typeof(#nse) #v=#nse; #lhs=#v | #se; ...}
{.. #typeof(#se) #v0 = #se; { #slist2 } return #v0; ...}
{.. #typeof(#se) #v0 = #se; throw #v0; ...}
{.. #typeof(#sv) #v0 = #arr[#idx]; #static-initialisation(#sv); @(#sv) = #v0; ...}
{.. #typeof(#sv) #v0 = #arr[#idx]; @(#sv) = #v0; ...}
{.. #typeof(#sv) #v0 = (byte) #seShortIntLong; #static-initialisation(#sv); @(#sv) = #v0; ...}
{.. #typeof(#sv) #v0 = (byte) #seShortIntLong; @(#sv) = #v0; ...}
{.. #typeof(#sv) #v0 = (char) #seByteShortIntLong; #static-initialisation(#sv); @(#sv) = #v0; ...}
{.. #typeof(#sv) #v0 = (char) #seByteShortIntLong; @(#sv) = #v0; ...}
{.. #typeof(#sv) #v0 = (int) #seLong; #static-initialisation(#sv); @(#sv) = #v0; ...}
{.. #typeof(#sv) #v0 = (int) #seLong; @(#sv) = #v0; ...}
{.. #typeof(#sv) #v0 = #left >>> #right; ...}
{.. #typeof(#sv) #v0 = #left % #right; #static-initialisation(#sv); @(#sv) = #v0; ...}
{.. #typeof(#sv) #v0 = #left & #right; #static-initialisation(#sv); @(#sv) = #v0; ...}
{.. #typeof(#sv) #v0 = #left * #right; #static-initialisation(#sv); @(#sv) = #v0; ...}
{.. #typeof(#sv) #v0 = #left + #right; #static-initialisation(#sv); @(#sv) = #v0; ...}
{.. #typeof(#sv) #v0 = #left - #right; #static-initialisation(#sv); @(#sv) = #v0; ...}
{.. #typeof(#sv) #v0 = #left / #right; #static-initialisation(#sv); @(#sv) = #v0; ...}
{.. #typeof(#sv) #v0 = #left << #right; #static-initialisation(#sv); @(#sv) = #v0; ...}
{.. #typeof(#sv) #v0 = #left >> #right; #static-initialisation(#sv); @(#sv) = #v0; ...}
{.. #typeof(#sv) #v0 = #left ^ #right; #static-initialisation(#sv); @(#sv) = #v0; ...}
{.. #typeof(#sv) #v0 = #left | #right; #static-initialisation(#sv); @(#sv) = #v0; ...}
{.. #typeof(#sv) #v0 = #left % #right; @(#sv) = #v0; ...}
{.. #typeof(#sv) #v0 = #left & #right; @(#sv) = #v0; ...}
{.. #typeof(#sv) #v0 = #left * #right; @(#sv) = #v0; ...}
{.. #typeof(#sv) #v0 = #left + #right; @(#sv) = #v0; ...}
{.. #typeof(#sv) #v0 = #left - #right; @(#sv) = #v0; ...}
{.. #typeof(#sv) #v0 = #left / #right; @(#sv) = #v0; ...}
{.. #typeof(#sv) #v0 = #left << #right; @(#sv) = #v0; ...}
{.. #typeof(#sv) #v0 = #left >> #right; @(#sv) = #v0; ...}
{.. #typeof(#sv) #v0 = #left ^ #right; @(#sv) = #v0; ...}
{.. #typeof(#sv) #v0 = #left | #right; @(#sv) = #v0; ...}
{.. #typeof(#sv) #v0 = - #left; #static-initialisation(#sv); @(#sv) = #v0; ...}
{.. #typeof(#sv) #v0 = ~ #left; #static-initialisation(#sv); @(#sv) = #v0; ...}
{.. #typeof(#sv) #v0 = - #left; @(#sv) = #v0; ...}
{.. #typeof(#sv) #v0 = ~ #left; @(#sv) = #v0; ...}
{.. #typeof(#sv) #v0 = (short) #seIntLong; #static-initialisation(#sv); @(#sv) = #v0; ...}
{.. #typeof(#sv) #v0 = (short) #seIntLong; @(#sv) = #v0; ...}
{.. #typeof(#v0) #v0 = #create-object(#n); #constructor-call(#v0, #n); #post-work(#v0); ...}
{.. #typeof(#v0) #v0 = #create-object(#n); #constructor-call(#v0, #n); #post-work(#v0); #lhs = #v0; ...}
{.. #typeof(#v) #v0=#v; #typeof(#nse) #v1=#nse; #v0.#a=#v1;...}
{.. #unpack(for(#loopInit; #guard; #forupdates) #s); ...}
{.. #unwind-loop (for(#i; #e; #sel) {#s}); ...}
{.. #unwind-loop (#innerLabel, #outerLabel, do #s while(#e);); ...}
{.. #unwind-loop(#innerLabel, #outerLabel, for(; #guard; #forupdates) #s); ...}
{.. #unwind-loop(#innerLabel, #outerLabel, for(; #guard;) #s); ...}
{.. #unwind-loop(#innerLabel, #outerLabel, for(#loopInit; #guard;) #s); ...}
{.. #unwind-loop (#innerLabel, #outerLabel, while(#e) #s); ...}
{.. #v0 = @(#sv); ...}
{.. #v0 = #v.#a; ...}
{.. #v0 = #v.#length; ...}
{.. #v = \all_fields(#nseObj); ...}
{.. #v = \all_objects(#eObj.#a); ...}
{.. #v.#a=#nse; ...}
{.. #v.#a=#se; ...}
{.. #v = #e; ...}
{.. #v = \indexOf(#nseLeft, #eRight); ...}
{.. #v = \indexOf(#seLeft, #nseRight); ...}
{.. #v = \intersect(#nseLeft, #eRight); ...}
{.. #v = \intersect(#seLeft, #nseRight); ...}
{.. #v = #nse instanceof #t; ...}
{.. #v=#nv.#attribute; ...}
{.. #v = \seq_concat(#nseLeft, #eRight); ...}
{.. #v = \seq_concat(#seLeft, #nseRight); ...}
{.. #v = \seq_get(#nseLeft, #eRight); ...}
{.. #v = \seq_get(#seLeft, #nseRight); ...}
{.. #v = \seq_length(#nse); ...}
{.. #v = \seq_reverse(#nse); ...}
{.. #v = \seq_singleton(#nse); ...}
{.. #v = \seq_sub(#nseLeft, #eMiddle, #eRight); ...}
{.. #v = \seq_sub(#seLeft, #nseMiddle, #eRight); ...}
{.. #v = \seq_sub(#seLeft, #seMiddle, #nseRight); ...}
{.. #v[#se]=#se0; ...}
{.. #v = \set_minus(#nseLeft, #eRight); ...}
{.. #v = \set_minus(#seLeft, #nseRight); ...}
{.. #v = \set_union(#nseLeft, #eRight); ...}
{.. #v = \set_union(#seLeft, #nseRight); ...}
{.. #v = \singleton(#nseObj.#a); ...}
{.. #v = \singleton(#seObj.#a); ...}
{.. #v.#sv = #arr[#idx]; ...}
{.. #v.#sv = #e; ...}
{.. @(#v.#sv) = #se; ...}
{.. #v.#sv = #v1.#a; ...}
{.. #v = #v0[#se]; ...}
{.. { while ( #e ) #s } ...}
{.. while ( #e ) #s ...}
{.. while(#e) #s ...}
{.. while (#nse) #body ... }
